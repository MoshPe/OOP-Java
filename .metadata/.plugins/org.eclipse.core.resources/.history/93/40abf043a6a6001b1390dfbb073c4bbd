package circuits;

public abstract class Gate {
	protected Gate[] inGates;
	
	public Gate(Gate[] inGates) {
		this.inGates = inGates;
	}
	
	public boolean calc() {
		boolean gates[] = new boolean[inGates.length];
		for (int i = 0; i < gates.length; i++) {
				if((inGates[i].getName()).equals("T"))
					gates[i] = true;
				else
					gates[i] = false;
		}
		return func(gates);		
	}

	protected abstract boolean func(boolean[] inValues);
	
	public abstract String getName();
	
	public abstract Gate simplify();
	
	public String toString() {
		StringBuilder returnFormula = new StringBuilder();
		if(!(getName().equals("T") && getName().equals("F")))
			returnFormula.append(getName()+"[");
		for (int i = 0; i < inGates.length; i++) {
			if(inGates[i].getName().equals("T") ||inGates[i].getName().equals("F"))
				returnFormula.append(inGates[i].getName()+ ((i + 1) == inGates.length ? " " : ", "));
			else {
				returnFormula.append(inGates[i].getName()+"[");	
			}
		}
		returnFormula.append("]");
	}
		return returnFormula.toString();
	}
}
