package tasks;

import java.util.Arrays;

//import java.util.Arrays;

public class Tasks {
	private int task[][];
	private int taskSize;

	public Tasks(int num) {
		task = new int[num][num];
		taskSize = num;
	}

	public boolean dependsOn(int task1, int task2) {

		if (task1 >= taskSize || task1 < 0 || task2 >= taskSize || task2 < 0)
			return false;
		else
			task[task2][task1] = 1;
		return true;
	}

	public int[] order() {
		int countIndependecies = 0;
		boolean isIndependent = false;
		int j, i, k;
		int returnArrSize = 0;
		int returnArr[] = new int[taskSize];
		resetReturnArr(returnArr);
		for (k = 0; k < taskSize; k++) {
			for (i = 0; i < taskSize; i++) {
				{
					for (j = 0; j < taskSize; j++) {
						if (task[j][i] == 0)
							countIndependecies++;
					}
					if (countIndependecies == taskSize && !isExist(returnArr, i)) {
						returnArr[returnArrSize++] = i;
						isIndependent = true;
						resetRow(task, i);
						//TODO
						i = taskSize;
					}
					countIndependecies = 0;
				}
			}
			if (isIndependent == false)
				return null;
			else if (returnArrSize == taskSize)
				return returnArr;
			isIndependent = false;
		}
		return returnArr;
	}

	private boolean isExist(int arr[], int isIn) {
		for (int i = 0; i < arr.length; i++)
			if (isIn == arr[i])
				return true;
		return false;
	}

	private void resetRow(int arr[][], int rowToReset) {
		for (int i = 0; i < taskSize; i++)
			task[rowToReset][i] = 0;
	}

	private void resetReturnArr(int arr[]) {
		for (int i = 0; i < arr.length; i++)
			arr[i] = -1;
	}

	public static void main(String[] args) {
		Tasks t = new Tasks(6);
		t.dependsOn(3, 2);
		t.dependsOn(1, 3);
		t.dependsOn(2, 5);
		t.dependsOn(4, 5);


		System.out.println(Arrays.toString(t.order()));
	}
}
